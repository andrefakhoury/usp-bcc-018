TAD's

Tipo de dados: conceito e implementacao
Tipos Abstratos de Dados: parte conceitual
Estrutura de Dados: forma de implementar os TAD

Tipo de uma variavel
	Define o conjunto de valores e como ela pode ser manipulada;
	Declaracao de variavel especifica qtde de bytes e como eles sao interpretados;

Altas tretas se for usar um tipo e depois trocar
	Por exemplo: ta usando vetor[2] pra fazer um racionais (num e den) e depois troca pra uma struct - tem  q trocar td
	Solucao: Encapsulamento
		Definir um tipo abstrato de dados

Tipo abstrato de Dados
	Definido por par: (v,o)
		v: valores; o: operacoes;
	Os dados podem ser manipulados apenas pelos OPERADORES;
		Ocultar os detalhes (ninguem sabe os detalhes, so a funcionalidade);
		Encapsular dados e comportamento;
		So tem acesso as operacoes, nao aos dados;
	Mais facil de programar, seguro, maior independencia, portabilidade, manutencao, reutilizaco, abstracao;
	Sugestao de implementacao
		Nao fazer entrada/saida;
		Passagem de paramtros de modo a deixar generico;
		Retornar FLAG de erro;

Estrutura de Dados
	Utilizada para representar o TAD

Modularizacao em C
	Da pra separar o programa em varios arquivos (.c - modulos)
	Cada modulo eh compilado separadamente
		Arquivos .o e .obj nao executaveis
		Que depois sao juntados em executaveis
	Listar no inicio de cada modulo os cabecalhos
	Pra compilar
		gcc -c STR.c
		gcc -c Exemplo.c
		gcc -o a.out STR.o Exemplo.o

	

Alocacao Sequencial
	Elementos ficam necessariamente na sequencia na memoria
Alocacao Estatica
	Aloca td em compilacao (int[])
	Fica alocado ate o final da execucao


FILA
Fila em vetor circular:
	Nao precisa ficar pensando em shift de elementos, etc
	Se remover, aumenta o inicio
	Se adicionar, aumenta o fim
	So ta cheia qd inicio==fim
	Bem loco isso

