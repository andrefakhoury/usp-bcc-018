v =	=======================================
	|| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 || pos
	---------------------------------------
	|| 8 | 9 | 3 | 8 | 0 | 8 | 0 | 1 | 2 || val
	=======================================

1) verifica intervalo das chaves
	min = 0
	max = 9
	k = tamanho do valor do intervalo = 10

2) cria vetor de contagem das chaves (zerado)
C =	===========================================
	|| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 || pos 		C[v[i]]++
	-------------------------------------------
	|| 2 | 1 | 1 | 1 | 0 | 0 | 0 | 0 | 3 | 1 || qtt
	===========================================

3) percorre 'C' atualizando 'v'
v =	=======================================
	|| 0 | 0 | 1 | 2 | 3 | 8 | 8 | 8 | 9 || val
	=======================================
possui 2 zeros, 1 um, 1 dois, 1 tres, 3 oitos e 1 nove

_________________________________________
VANTAGENS E DESVANTAGENS

+ linear
+ implementacao

- memoria
- intervalo das chaves limitado
- chaves inteiras
- nao pode usar com struct


tempo: O(n+k)
memoria aux: O(k)




------------------------------------
Counting Sort acumulado: Permite ordenar structs a partir de uma chave de forma estavel

Tem o vetor de chave acumulada: armazena a posicao que cada elemento deve ter